package com.koalog.jcs.constraint.arithmetic;

import com.koalog.jcs.variable.IntegerVariable;
import com.koalog.jcs.constraint.InvalidConstraintException;
import com.koalog.jcs.constraint.Problem;
import com.koalog.jcs.constraint.BaseProblem;
import com.koalog.jcs.domain.Domain;
import com.koalog.jcs.solver.Solver;
import com.koalog.jcs.solver.DefaultSplitSolver;
import com.koalog.jcs.solver.SolutionStack;
import org.apache.log4j.Category;
import org.apache.log4j.xml.DOMConfigurator;

/**
 * Enforces the variables to have a constant sum while being different.
 * The number of variables must be between 
 * <CODE>VARS_MIN</CODE> and <CODE>VARS_MAX</CODE>.
 * The constant sum must be between 
 * <CODE>SUM_MIN</CODE> and <CODE>SUM_MAX</CODE>.
 *
 * <P>Important note: variables are forced to take their values beetween 
 * <CODE>VAR_MIN</CODE> and <CODE>VAR_MIN</CODE>.
 *
 * @since 3.1 
 * @author Yan Georget
 */
public class AllDifferentConstantSum extends BaseProblem {
    //------------------------------------------------------------------------
    // CONSTRUCTORS
    //------------------------------------------------------------------------
    /**
     * Sole constructor.
     * @param vars an array containing between 
     * <CODE>VARS_MIN</CODE> and <CODE>VARS_MAX</CODE> variables
     * @param sum an integer between 
     * <CODE>SUM_MIN</CODE> and <CODE>SUM_MAX</CODE>
     */
    public AllDifferentConstantSum(IntegerVariable[] vars, int sum) {
        super();
        this.name = "alldifferent and SIGMA_i x_i=" + sum;
        checkArguments(vars, sum);
        int n = vars.length;
        IntegerVariable[] svars = new IntegerVariable[n];
        for (int v=0; v<n; v++) {
            svars[v] = new IntegerVariable(VAR_MIN, 
                                           VAR_MAX);
        }
        add(new ConstantSum(vars, sum));
        add(new ConstantSum(svars, sum));
        add(new AllDifferentSort(vars, svars));
        add(new Relation(svars, getTuples(n, sum))); 
        // TODO: extends the limits
        setVariables(vars);
    }

    //------------------------------------------------------------------------
    // STATIC METHODS
    //------------------------------------------------------------------------
    static void checkArguments(IntegerVariable[] vars, int sum) {
        if (sum < SUM_MIN) {
            throw new InvalidConstraintException("constant sum too small:" 
                                                 + sum 
                                                 + " instead of " 
                                                 + SUM_MIN);
        }
        if (sum > SUM_MAX) {
            throw new InvalidConstraintException("constant sum too large:" 
                                                 + sum 
                                                 + " instead of " 
                                                 + SUM_MAX);
        }
        if (vars.length < VARS_MIN) {
            throw new InvalidConstraintException("too few variables:" 
                                                 + vars.length 
                                                 + " instead of " 
                                                 + VARS_MIN);
        }
        if (vars.length > VARS_MAX) {
            throw new InvalidConstraintException("too many variables:" 
                                                 + vars.length 
                                                 + " instead of " 
                                                 + VARS_MAX);
        }
        // TODO: check the bounds of the variables
    }

    /**
     * Given a number n and a sum, 
     * return all the decompositions of the sum into n distinct variables.
     * @param n the number of variables
     * @param sum the sum
     * @return an array of decompositions, 
     * each decomposition being an array of sorted distinct numbers
     */
    public static int[][] getTuples(int n, int sum) {
        try {
            return tuples[sum-SUM_MIN][n-VARS_MIN];
        } catch (ArrayIndexOutOfBoundsException aioobe) {
            int[][] tuples = {};
            return tuples;
        }
    }

    /** 
     * Used to generate the tuples.
     * @param args the command line arguments: 
     * args[0] is a Log4J configuration file
     */
    public static void main(String[] args) {
        DOMConfigurator.configure(args[0]);
        System.out.println("static int[][][][] tuples={");
        for (int sum=SUM_MIN; sum<=SUM_MAX; sum++) {
            System.out.print("{");
            for (int n=VARS_MIN; n<=VARS_MAX && 2*sum>=n*(n+1);) {
                String buf = "{";
                Problem p = new BaseProblem();
                IntegerVariable[] vars = new IntegerVariable[n];
                for (int i=0; i<n; i++) {
                    vars[i] = new IntegerVariable("_" +i, 
                                                  VAR_MIN, 
                                                  Math.min(VAR_MAX, 
                                                           sum-((n-1)*n)/2));
                }
                p.add(new StrictlyIncreasing(vars));
                p.add(new ConstantSum(vars, sum));
                p.setVariables(vars);
                Solver s = new DefaultSplitSolver(p);
                s.solve();
                SolutionStack solutions = s.getSolutions();
                for (int i=0; i<solutions.size(); i++) {
                    Domain[] doms = solutions.getSolution(i);
                    buf += "{";
                    for (int j=0; j<doms.length; j++) {
                        buf += doms[j];
                        if (j<doms.length-1) {
                            buf += ",";
                        }
                    } 
                    buf += "}";
                    if (i<solutions.size()-1) {
                        buf += ",";
                    }
                }
                n++;
                buf += "}";
                if (2*sum>=n*(n+1) && n<=VARS_MAX) {
                    buf += ",";
                }
                System.out.print(buf);
            }
            if (sum<SUM_MAX) {
                System.out.println("},");
            } else {
                System.out.println("}");
            }
        }
        System.out.print("};");
    }

    //------------------------------------------------------------------------
    // CONSTANTS
    //------------------------------------------------------------------------
    /** The minimal value of a variable. */
    public static final int VAR_MIN = 1;
    /** The maximal value of a variable. */
    public static final int VAR_MAX = 9;
    /** The minimal value of the sum. */
    public static final int SUM_MIN = 3;
    /** The maximal value of the sum. */
    public static final int SUM_MAX = 45;
    /** The minimal size of the decomposition. */
    public static final int VARS_MIN = 2;
    /** The maximal size of the decomposition. */
    public static final int VARS_MAX = 9;

    //------------------------------------------------------------------------
    // STATIC PROPERTIES
    //------------------------------------------------------------------------
    private static Category cat = 
    Category.getInstance(AllDifferentConstantSum.class);
    
    static int[][][][] tuples={
        {{{1,2}}},
        {{{1,3}}},
        {{{1,4},{2,3}}},
        {{{1,5},{2,4}},{{1,2,3}}},
        {{{1,6},{2,5},{3,4}},{{1,2,4}}},
        {{{1,7},{2,6},{3,5}},{{1,2,5},{1,3,4}}},
        {{{1,8},{2,7},{3,6},{4,5}},{{1,2,6},{1,3,5},{2,3,4}}},
        {{{1,9},{2,8},{3,7},{4,6}},{{1,2,7},{1,3,6},{1,4,5},{2,3,5}},{{1,2,3,4}}},
        {{{2,9},{3,8},{4,7},{5,6}},{{1,2,8},{1,3,7},{1,4,6},{2,3,6},{2,4,5}},{{1,2,3,5}}},
        {{{3,9},{4,8},{5,7}},{{1,2,9},{1,3,8},{1,4,7},{1,5,6},{2,3,7},{2,4,6},{3,4,5}},{{1,2,3,6},{1,2,4,5}}},
        {{{4,9},{5,8},{6,7}},{{1,3,9},{1,4,8},{1,5,7},{2,3,8},{2,4,7},{2,5,6},{3,4,6}},{{1,2,3,7},{1,2,4,6},{1,3,4,5}}},
        {{{5,9},{6,8}},{{1,4,9},{1,5,8},{1,6,7},{2,3,9},{2,4,8},{2,5,7},{3,4,7},{3,5,6}},{{1,2,3,8},{1,2,4,7},{1,2,5,6},{1,3,4,6},{2,3,4,5}}},
        {{{6,9},{7,8}},{{1,5,9},{1,6,8},{2,4,9},{2,5,8},{2,6,7},{3,4,8},{3,5,7},{4,5,6}},{{1,2,3,9},{1,2,4,8},{1,2,5,7},{1,3,4,7},{1,3,5,6},{2,3,4,6}},{{1,2,3,4,5}}},
        {{{7,9}},{{1,6,9},{1,7,8},{2,5,9},{2,6,8},{3,4,9},{3,5,8},{3,6,7},{4,5,7}},{{1,2,4,9},{1,2,5,8},{1,2,6,7},{1,3,4,8},{1,3,5,7},{1,4,5,6},{2,3,4,7},{2,3,5,6}},{{1,2,3,4,6}}},
        {{{8,9}},{{1,7,9},{2,6,9},{2,7,8},{3,5,9},{3,6,8},{4,5,8},{4,6,7}},{{1,2,5,9},{1,2,6,8},{1,3,4,9},{1,3,5,8},{1,3,6,7},{1,4,5,7},{2,3,4,8},{2,3,5,7},{2,4,5,6}},{{1,2,3,4,7},{1,2,3,5,6}}},
        {{},{{1,8,9},{2,7,9},{3,6,9},{3,7,8},{4,5,9},{4,6,8},{5,6,7}},{{1,2,6,9},{1,2,7,8},{1,3,5,9},{1,3,6,8},{1,4,5,8},{1,4,6,7},{2,3,4,9},{2,3,5,8},{2,3,6,7},{2,4,5,7},{3,4,5,6}},{{1,2,3,4,8},{1,2,3,5,7},{1,2,4,5,6}}},
        {{},{{2,8,9},{3,7,9},{4,6,9},{4,7,8},{5,6,8}},{{1,2,7,9},{1,3,6,9},{1,3,7,8},{1,4,5,9},{1,4,6,8},{1,5,6,7},{2,3,5,9},{2,3,6,8},{2,4,5,8},{2,4,6,7},{3,4,5,7}},{{1,2,3,4,9},{1,2,3,5,8},{1,2,3,6,7},{1,2,4,5,7},{1,3,4,5,6}}},
        {{},{{3,8,9},{4,7,9},{5,6,9},{5,7,8}},{{1,2,8,9},{1,3,7,9},{1,4,6,9},{1,4,7,8},{1,5,6,8},{2,3,6,9},{2,3,7,8},{2,4,5,9},{2,4,6,8},{2,5,6,7},{3,4,5,8},{3,4,6,7}},{{1,2,3,5,9},{1,2,3,6,8},{1,2,4,5,8},{1,2,4,6,7},{1,3,4,5,7},{2,3,4,5,6}}},
        {{},{{4,8,9},{5,7,9},{6,7,8}},{{1,3,8,9},{1,4,7,9},{1,5,6,9},{1,5,7,8},{2,3,7,9},{2,4,6,9},{2,4,7,8},{2,5,6,8},{3,4,5,9},{3,4,6,8},{3,5,6,7}},{{1,2,3,6,9},{1,2,3,7,8},{1,2,4,5,9},{1,2,4,6,8},{1,2,5,6,7},{1,3,4,5,8},{1,3,4,6,7},{2,3,4,5,7}},{{1,2,3,4,5,6}}},
        {{},{{5,8,9},{6,7,9}},{{1,4,8,9},{1,5,7,9},{1,6,7,8},{2,3,8,9},{2,4,7,9},{2,5,6,9},{2,5,7,8},{3,4,6,9},{3,4,7,8},{3,5,6,8},{4,5,6,7}},{{1,2,3,7,9},{1,2,4,6,9},{1,2,4,7,8},{1,2,5,6,8},{1,3,4,5,9},{1,3,4,6,8},{1,3,5,6,7},{2,3,4,5,8},{2,3,4,6,7}},{{1,2,3,4,5,7}}},
        {{},{{6,8,9}},{{1,5,8,9},{1,6,7,9},{2,4,8,9},{2,5,7,9},{2,6,7,8},{3,4,7,9},{3,5,6,9},{3,5,7,8},{4,5,6,8}},{{1,2,3,8,9},{1,2,4,7,9},{1,2,5,6,9},{1,2,5,7,8},{1,3,4,6,9},{1,3,4,7,8},{1,3,5,6,8},{1,4,5,6,7},{2,3,4,5,9},{2,3,4,6,8},{2,3,5,6,7}},{{1,2,3,4,5,8},{1,2,3,4,6,7}}},
        {{},{{7,8,9}},{{1,6,8,9},{2,5,8,9},{2,6,7,9},{3,4,8,9},{3,5,7,9},{3,6,7,8},{4,5,6,9},{4,5,7,8}},{{1,2,4,8,9},{1,2,5,7,9},{1,2,6,7,8},{1,3,4,7,9},{1,3,5,6,9},{1,3,5,7,8},{1,4,5,6,8},{2,3,4,6,9},{2,3,4,7,8},{2,3,5,6,8},{2,4,5,6,7}},{{1,2,3,4,5,9},{1,2,3,4,6,8},{1,2,3,5,6,7}}},
        {{},{},{{1,7,8,9},{2,6,8,9},{3,5,8,9},{3,6,7,9},{4,5,7,9},{4,6,7,8}},{{1,2,5,8,9},{1,2,6,7,9},{1,3,4,8,9},{1,3,5,7,9},{1,3,6,7,8},{1,4,5,6,9},{1,4,5,7,8},{2,3,4,7,9},{2,3,5,6,9},{2,3,5,7,8},{2,4,5,6,8},{3,4,5,6,7}},{{1,2,3,4,6,9},{1,2,3,4,7,8},{1,2,3,5,6,8},{1,2,4,5,6,7}}},
        {{},{},{{2,7,8,9},{3,6,8,9},{4,5,8,9},{4,6,7,9},{5,6,7,8}},{{1,2,6,8,9},{1,3,5,8,9},{1,3,6,7,9},{1,4,5,7,9},{1,4,6,7,8},{2,3,4,8,9},{2,3,5,7,9},{2,3,6,7,8},{2,4,5,6,9},{2,4,5,7,8},{3,4,5,6,8}},{{1,2,3,4,7,9},{1,2,3,5,6,9},{1,2,3,5,7,8},{1,2,4,5,6,8},{1,3,4,5,6,7}}},
        {{},{},{{3,7,8,9},{4,6,8,9},{5,6,7,9}},{{1,2,7,8,9},{1,3,6,8,9},{1,4,5,8,9},{1,4,6,7,9},{1,5,6,7,8},{2,3,5,8,9},{2,3,6,7,9},{2,4,5,7,9},{2,4,6,7,8},{3,4,5,6,9},{3,4,5,7,8}},{{1,2,3,4,8,9},{1,2,3,5,7,9},{1,2,3,6,7,8},{1,2,4,5,6,9},{1,2,4,5,7,8},{1,3,4,5,6,8},{2,3,4,5,6,7}}},
        {{},{},{{4,7,8,9},{5,6,8,9}},{{1,3,7,8,9},{1,4,6,8,9},{1,5,6,7,9},{2,3,6,8,9},{2,4,5,8,9},{2,4,6,7,9},{2,5,6,7,8},{3,4,5,7,9},{3,4,6,7,8}},{{1,2,3,5,8,9},{1,2,3,6,7,9},{1,2,4,5,7,9},{1,2,4,6,7,8},{1,3,4,5,6,9},{1,3,4,5,7,8},{2,3,4,5,6,8}},{{1,2,3,4,5,6,7}}},
        {{},{},{{5,7,8,9}},{{1,4,7,8,9},{1,5,6,8,9},{2,3,7,8,9},{2,4,6,8,9},{2,5,6,7,9},{3,4,5,8,9},{3,4,6,7,9},{3,5,6,7,8}},{{1,2,3,6,8,9},{1,2,4,5,8,9},{1,2,4,6,7,9},{1,2,5,6,7,8},{1,3,4,5,7,9},{1,3,4,6,7,8},{2,3,4,5,6,9},{2,3,4,5,7,8}},{{1,2,3,4,5,6,8}}},
        {{},{},{{6,7,8,9}},{{1,5,7,8,9},{2,4,7,8,9},{2,5,6,8,9},{3,4,6,8,9},{3,5,6,7,9},{4,5,6,7,8}},{{1,2,3,7,8,9},{1,2,4,6,8,9},{1,2,5,6,7,9},{1,3,4,5,8,9},{1,3,4,6,7,9},{1,3,5,6,7,8},{2,3,4,5,7,9},{2,3,4,6,7,8}},{{1,2,3,4,5,6,9},{1,2,3,4,5,7,8}}},
        {{},{},{},{{1,6,7,8,9},{2,5,7,8,9},{3,4,7,8,9},{3,5,6,8,9},{4,5,6,7,9}},{{1,2,4,7,8,9},{1,2,5,6,8,9},{1,3,4,6,8,9},{1,3,5,6,7,9},{1,4,5,6,7,8},{2,3,4,5,8,9},{2,3,4,6,7,9},{2,3,5,6,7,8}},{{1,2,3,4,5,7,9},{1,2,3,4,6,7,8}}},
        {{},{},{},{{2,6,7,8,9},{3,5,7,8,9},{4,5,6,8,9}},{{1,2,5,7,8,9},{1,3,4,7,8,9},{1,3,5,6,8,9},{1,4,5,6,7,9},{2,3,4,6,8,9},{2,3,5,6,7,9},{2,4,5,6,7,8}},{{1,2,3,4,5,8,9},{1,2,3,4,6,7,9},{1,2,3,5,6,7,8}}},
        {{},{},{},{{3,6,7,8,9},{4,5,7,8,9}},{{1,2,6,7,8,9},{1,3,5,7,8,9},{1,4,5,6,8,9},{2,3,4,7,8,9},{2,3,5,6,8,9},{2,4,5,6,7,9},{3,4,5,6,7,8}},{{1,2,3,4,6,8,9},{1,2,3,5,6,7,9},{1,2,4,5,6,7,8}}},
        {{},{},{},{{4,6,7,8,9}},{{1,3,6,7,8,9},{1,4,5,7,8,9},{2,3,5,7,8,9},{2,4,5,6,8,9},{3,4,5,6,7,9}},{{1,2,3,4,7,8,9},{1,2,3,5,6,8,9},{1,2,4,5,6,7,9},{1,3,4,5,6,7,8}}},
        {{},{},{},{{5,6,7,8,9}},{{1,4,6,7,8,9},{2,3,6,7,8,9},{2,4,5,7,8,9},{3,4,5,6,8,9}},{{1,2,3,5,7,8,9},{1,2,4,5,6,8,9},{1,3,4,5,6,7,9},{2,3,4,5,6,7,8}}},
        {{},{},{},{},{{1,5,6,7,8,9},{2,4,6,7,8,9},{3,4,5,7,8,9}},{{1,2,3,6,7,8,9},{1,2,4,5,7,8,9},{1,3,4,5,6,8,9},{2,3,4,5,6,7,9}},{{1,2,3,4,5,6,7,8}}},
        {{},{},{},{},{{2,5,6,7,8,9},{3,4,6,7,8,9}},{{1,2,4,6,7,8,9},{1,3,4,5,7,8,9},{2,3,4,5,6,8,9}},{{1,2,3,4,5,6,7,9}}},
        {{},{},{},{},{{3,5,6,7,8,9}},{{1,2,5,6,7,8,9},{1,3,4,6,7,8,9},{2,3,4,5,7,8,9}},{{1,2,3,4,5,6,8,9}}},
        {{},{},{},{},{{4,5,6,7,8,9}},{{1,3,5,6,7,8,9},{2,3,4,6,7,8,9}},{{1,2,3,4,5,7,8,9}}},
        {{},{},{},{},{},{{1,4,5,6,7,8,9},{2,3,5,6,7,8,9}},{{1,2,3,4,6,7,8,9}}},
        {{},{},{},{},{},{{2,4,5,6,7,8,9}},{{1,2,3,5,6,7,8,9}}},
        {{},{},{},{},{},{{3,4,5,6,7,8,9}},{{1,2,4,5,6,7,8,9}}},
        {{},{},{},{},{},{},{{1,3,4,5,6,7,8,9}}},
        {{},{},{},{},{},{},{{2,3,4,5,6,7,8,9}}},
        {{},{},{},{},{},{},{},{{1,2,3,4,5,6,7,8,9}}}
    };
}
